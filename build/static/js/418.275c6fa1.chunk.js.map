{"version":3,"file":"static/js/418.275c6fa1.chunk.js","mappings":"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","sources":["components/Forms/Layout/CustomDropdown/DropdownList.js","components/Forms/Layout/CustomDropdown/index.js","components/Forms/Sections/SectionH/AcMembership.js","components/Forms/Sections/SectionH/SubSections/QualifiedAccountantCert.js","components/Forms/Sections/SectionH/SectionHContent.js"],"sourcesContent":["import React from 'react'\r\n\r\nconst DropdownList = ({onSelectOption, dropdownOptions=[], addClass, renderLabel }) => {\r\n\r\n\r\n \r\n  const renderOption = ({label, value}) => <p key={`${value}`} onClick={()=>onSelectOption({label, value})}>{renderLabel({label, value})}</p>\r\n\r\n  const renderDropdownList = (optionsList) => optionsList.map((each)=> renderOption({label:each[1], value:each[0]}))\r\n \r\n  return (\r\n    <div className={`dropdown__main--options ${addClass}`}>\r\n        {renderDropdownList(dropdownOptions)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DropdownList;","import React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCaretDown, faCaretUp } from '@fortawesome/free-solid-svg-icons';\r\nimport DropdownList from './DropdownList';\r\n\r\nconst CustomDropdown = ({dropdownOptions, selectedOption, updateSelectedOption, addClass=\"\", extraLabel=\"\", doNotShowExtraLabelSpecial=[] }) => {\r\n\r\n  const [ toggle, setToggle ] = useState(false);\r\n\r\n  const onClickVisible = () => setToggle( prevState => !prevState )\r\n\r\n  const onSelectOption = ({label, value}) => {\r\n    updateSelectedOption({label, value})\r\n    onClickVisible();\r\n  } \r\n\r\n  const renderLabel = (option) =>{\r\n    const mainLabel = option?.label || \"\"\r\n\r\n    if(doNotShowExtraLabelSpecial.includes(option?.value)){\r\n      return mainLabel\r\n    } else if(option?.label && extraLabel){\r\n      return `${option.label} ${extraLabel}`\r\n    }\r\n    return mainLabel\r\n\r\n  }\r\n\r\n  return (\r\n        <div className=\"dropdown__main\">\r\n            <div className=\"dropdown__main--selected\" onClick={onClickVisible}>\r\n                <label>{renderLabel(selectedOption)}</label>\r\n                <FontAwesomeIcon icon={toggle? faCaretUp : faCaretDown} />\r\n            </div>\r\n            {toggle && <DropdownList onSelectOption={onSelectOption} dropdownOptions={dropdownOptions} addClass={addClass} renderLabel={renderLabel}/>}  \r\n        </div>\r\n  )\r\n}\r\n\r\nexport default CustomDropdown;","import React, {useEffect} from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport CustomTextField from '../../Layout/CustomTextField';\r\n\r\nfunction AcMembership({onChangeFn}) {\r\n    const secH = useSelector((store) => store.secH);\r\n    const invFormStatus = useSelector((store) => store.invFormStatus)\r\n\r\n    useEffect(()=>{\r\n        return ()=>{\r\n            onChangeFn({name:\"membership_number\", value:\"\"});\r\n            onChangeFn({name:\"membership_designation\", value:\"\"});\r\n        }\r\n    },[])\r\n\r\n  return (\r\n    <div className=\"sub__form\">\r\n        <CustomTextField\r\n            placeholder=\"Membership No.\"\r\n            id=\"membership-no.\"\r\n            label=\"Membership No.\"\r\n            asterisk=\"*\"\r\n            name=\"membership_number\"\r\n            value={secH?.membership_number || \"\"}\r\n            onChangeFn={onChangeFn}\r\n            formErrors={invFormStatus.errors}\r\n         />\r\n\r\n        <CustomTextField\r\n            placeholder=\"e.g. CPA, IPA, CA\"\r\n            id=\"membership-designation\"\r\n            label=\"Membership Designation\"\r\n            asterisk=\"*\"\r\n            name=\"membership_designation\"\r\n            value={secH?.membership_designation || \"\"}\r\n            onChangeFn={onChangeFn}\r\n            formErrors={invFormStatus.errors}\r\n        />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AcMembership","import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux'; \r\nimport { YES_H, NO_H, ACCOUNTANT_CERTIFICATE_DOCUMENTS } from '../../../../../constants';\r\nimport CustomRadioInput from '../../../Layout/CustomRadioInput';\r\nimport AcNameEmail from '../AcNameEmail';\r\n// import CustomTextButtonField from '../../../Layout/CustomTextButtonField';\r\nimport CustomTextField from '../../../Layout/CustomTextField';\r\nimport DocPlaceholder from '../../../Layout/DocPlaceholder';\r\nimport { LOADING, SUCCESS, FAILED } from '../../../../../constants';\r\nimport { uploadFiles, deleteFile } from '../../../../../actions/Investor-Application-Form/uploadDocActions';\r\nimport AcProfBody from '../AcProfBody';\r\nimport AcMembership from '../AcMembership';\r\nimport { isNumber } from '../../../../../utils/regexFuncs';\r\nimport CustomDropdown from '../../../Layout/CustomDropdown';\r\nimport { addNewDocToArray, removeDocFromArray, updateDocArray } from '../../../../../utils/documentUploads';\r\nimport { useToast } from '../../../../CustomToast';\r\n\r\nconst QualifiedAccountantCert = ({onFormChange, investorFormId}) => {\r\n    const toast = useToast();\r\n    const secH = useSelector((store) => store.secH);\r\n    const invFormStatus = useSelector((store) => store.invFormStatus)\r\n    \r\n    const [selectedDocType, setSelectedDocType] = useState({label:\"Select type of document\", value:\"\"})\r\n    const [uploadedDocs, setUploadedDocs] = useState([]);\r\n\r\n    const onChangeRadioFn = ({name, value}) =>{ \r\n      const convrtToNum = parseInt(value);\r\n      onFormChange({name, value:convrtToNum});\r\n    }\r\n\r\n    const onChangeFn = ({name, value}) =>{\r\n      if(name === 'phone_number'){\r\n        const isValid = value==='' || isNumber(value);\r\n        if(!isValid) return\r\n    }\r\n      onFormChange({name, value});\r\n    }\r\n\r\n    const onChangeDrpDwn = (e) => {\r\n      const {name, value} = e.target;\r\n      const convrtToNum = value && parseInt(value);\r\n      onFormChange({name, value:convrtToNum});\r\n    }\r\n\r\n    const onUploadFile = async(file, type={label:'', value:''}) =>{ //call api to upload files\r\n        if(file){                                 \r\n            const fileName = file.name                   \r\n            const formData = new FormData();\r\n            formData.append('file', file);\r\n            formData.append('type', type.value);\r\n            formData.append('section', 'h');\r\n            formData.append('investor_form_id', investorFormId);\r\n            const {success, url, data} = await uploadFiles(formData)\r\n            const extradata = {\r\n                loader: success? SUCCESS : FAILED,\r\n                docUrl: url,\r\n                resData: data\r\n            }\r\n            updateDocArray({setUploadedDocs, fileName, extradata})\r\n        }\r\n    }\r\n\r\n    const onAddFiles = (files) => {\r\n        //add selected files(by user) to local state - and call api\r\n        addNewDocToArray({\r\n            files,\r\n            uploadedDocs,\r\n            setUploadedDocs,\r\n            onUploadFile,\r\n            selectedDocType:{...selectedDocType},\r\n        })\r\n    }\r\n\r\n    const onClickRemove = (fileName) => {\r\n        //just remove the file from local state\r\n        removeDocFromArray({fileName, uploadedDocs, setUploadedDocs})\r\n    }\r\n\r\n    const onClickDel = async({fileName, docData}) => {\r\n      //delete the file from aws & remove the file from local state\r\n      updateDocArray({setUploadedDocs, fileName, extradata: {delLoader: true}})\r\n      const { success } = await deleteFile(docData?.resData);\r\n      success && onClickRemove(fileName);\r\n      success && toast.success(\"Deleted successfully!\");\r\n      success || updateDocArray({setUploadedDocs, fileName, extradata: {delLoader: false}})\r\n      success || toast.error(\"Please try again!\")\r\n  }\r\n\r\n    const updateSelectedOption = (option) => {\r\n      //update selected document type to the state\r\n      setSelectedDocType({...option})\r\n    }\r\n\r\n  return (\r\n        //  {/* <h4>H.2 Qualified Accountant Certification</h4>\r\n        //  <div className=\"section__container--box\">\r\n        //    <div className=\"u-padding-y\">\r\n        //      <h6>Email to your accountant for electronic signing?</h6>\r\n        //        <div>\r\n        //          <CustomRadioInput */}\r\n    // {/* //               name=\"should_email_accountant_for_esigning\"\r\n    // //               id={`email-yes`}\r\n    // //               content=\"Yes\"\r\n    // //               val={YES_H}\r\n    // //               checked={secH?.should_email_accountant_for_esigning === YES_H}\r\n    // //               onChangeFn={onChangeRadioFn}\r\n    // //             />\r\n    // //             <CustomRadioInput\r\n    // //               name=\"should_email_accountant_for_esigning\"\r\n    // //               id={`email-no`}\r\n    // //               content=\"No\"\r\n    // //               val={NO_H}\r\n    // //               checked={secH?.should_email_accountant_for_esigning === NO_H}\r\n    // //               onChangeFn={onChangeRadioFn}\r\n    // //             />\r\n    // //           </div>\r\n\r\n    // //           <div className=\"u-padding-y\">\r\n    // //             { secH?.should_email_accountant_for_esigning === YES_H? <AcNameEmail onChangeFn={onChangeFn} /> : null}\r\n    // //             <CustomTextField \r\n    // //               type={\"form-input-full-width\"} \r\n    // //               label=\"Address 1\"\r\n    // //               asterisk={''}\r\n    // //               id={\"address\"}\r\n    // //               placeholder=\"Address\"\r\n    // //               name=\"address_1\"\r\n    // //               value={secH?.address_1 || \"\"}\r\n    // //               onChangeFn={onChangeFn}\r\n    // //               formErrors={invFormStatus.errors}\r\n    // //             />\r\n\r\n    // //             <CustomTextField \r\n    // //               type={\"form-input-full-width u-margin-bottom-0\"} \r\n    // //               label=\"Phone\"\r\n    // //               asterisk={''}\r\n    // //               id={\"phone\"}\r\n    // //               placeholder=\"Phone Number\"\r\n    // //               name=\"phone_number\"\r\n    // //               value={secH?.phone_number || \"\"}\r\n    // //               onChangeFn={onChangeFn}\r\n    // //               formErrors={invFormStatus.errors}\r\n    // //             />\r\n    // //           </div>\r\n\r\n    // //           <div className=\"u-padding-y\">\r\n    // //             {secH?.accountant_name? <AcProfBody onChangeDrpDwn={onChangeDrpDwn}/>: null}\r\n\r\n    // //             {secH?.professional_body || secH?.professional_body === 0 ? <AcMembership onChangeFn={onChangeFn}/>: null}\r\n    // //           </div>\r\n    // //       </div>\r\n\r\n    // //     </div>\r\n\r\n    // //     <hr /> */}\r\n\r\n        <div className=\"section__container--box\"> \r\n\r\n        {/* {secH?.should_email_accountant_for_esigning === YES_H ? --Not needed now but later(phase-2)\r\n          <div className=\"u-padding-y u-margin-bottom-lg\">\r\n            <CustomTextButtonField\r\n              id=\"verify-email\"\r\n              placeholder=\"Enter email address\"\r\n              type=\"email\"\r\n              content=\"Verified\" \r\n              label=\"Email Verification\"\r\n              asterisk={\"*\"}\r\n              fullWidth={'-full-width'}\r\n            />\r\n          </div>: null} */}\r\n\r\n          <h6 className=\"u-padding-y\">Please upload your certificate below. Certificates must not issued more than 2 years before the date of this application and must include the accountant signature, information of the accountant membership of an eligible professional body.</h6>\r\n          <CustomDropdown\r\n              dropdownOptions={ACCOUNTANT_CERTIFICATE_DOCUMENTS}\r\n              selectedOption={selectedDocType}\r\n              updateSelectedOption={updateSelectedOption}\r\n          />\r\n          {selectedDocType?.value ?\r\n              <div className='u-padding-y'>\r\n                <DocPlaceholder onAddFiles={onAddFiles} uploadedDocs={uploadedDocs} onClickRemove={onClickRemove} onClickDel={onClickDel} uniqId=\"qualifiedaccountantcert_h\"/>\r\n              </div>: null\r\n          }\r\n              \r\n          <div className=\"note__box u-padding-y u-margin-bottom\">\r\n            <p><span>Note:</span> For information on this certificate or a list of accountant qualifications, please refer to <a href=\"https://asic.gov.au/regulatory-resources/financial-services/financial-product-disclosure/certificates-issued-by-a-qualified-accountant/\" target=\"_blank\" rel='noreferrer'>https://asic.gov.au/regulatory-resources/financial-services/financial-product-disclosure/certificates-issued-by-a-qualified-accountant/</a></p>\r\n          </div>\r\n        </div>\r\n  )\r\n}\r\n\r\nexport default QualifiedAccountantCert;","import React, { useState, useEffect, Suspense } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n// import InvestorCategory from './SubSections/InvestorCategory';\r\nimport QualifiedAccountantCert from './SubSections/QualifiedAccountantCert';\r\nimport { I_HAVE_NET_ASSETS_OF_AT_LEAST_AU_H, I_HAVE_EARNED_AT_LEAST_AU_H, I_HAVE_OR_CONTROL_GROSS_ASSETS_OF_AT_LEAST_AU_H } from '../../../../constants';\r\nimport { ShimmerCardFormSection, ShimmerCardText } from '../../../stylesheet/Loader';\r\nimport { formatAndPrintDocs } from '../../../../utils/validations/helperFunc';\r\n\r\nconst InvestorCategory = React.lazy(() => import('./SubSections/InvestorCategory'));\r\n\r\nconst SectionHContent = ({onFormChange, investorFormId, removeDocFromArr}) => {\r\n\r\n  const secH = useSelector((store) => store.secH);\r\n  const invFormStatus = useSelector((store) => store.invFormStatus);\r\n  const arrOfVariables =  [I_HAVE_NET_ASSETS_OF_AT_LEAST_AU_H, I_HAVE_EARNED_AT_LEAST_AU_H, I_HAVE_OR_CONTROL_GROSS_ASSETS_OF_AT_LEAST_AU_H]\r\n  const [ isDocVisible, setIsDocVisible ] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const isDocVisible=secH?.category_details?.some((each, index) => {\r\n      if(arrOfVariables.includes(each?.category)){\r\n        return true;\r\n      }\r\n    });\r\n    setIsDocVisible(isDocVisible);\r\n  }, [secH]);\r\n\r\n  return (\r\n    <div className=\"section\">\r\n      <h2 className=\"section__heading\">Section H: Certificate by Qualified Accountant</h2>\r\n      <ul className=\"u-margin-bottom-0\">\r\n        <li>Chapters 6D or 7 of the Corporations Act 2001.</li>\r\n      </ul>\r\n\r\n      <div className=\"section__container\">\r\n        <Suspense fallback={<ShimmerCardText />}>\r\n          <InvestorCategory onFormChange={onFormChange} investorFormId={investorFormId}/>\r\n        </Suspense>\r\n\r\n        {isDocVisible? <QualifiedAccountantCert onFormChange={onFormChange} investorFormId={investorFormId}/>: null}\r\n      </div>\r\n      {secH?.documents?.length > 0? formatAndPrintDocs(secH?.documents, removeDocFromArr) : null}\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SectionHContent;"],"names":["_ref","optionsList","onSelectOption","_ref$dropdownOptions","dropdownOptions","addClass","renderLabel","_jsx","className","concat","children","map","each","_ref2","label","value","onClick","renderOption","selectedOption","updateSelectedOption","_ref$addClass","_ref$extraLabel","extraLabel","_ref$doNotShowExtraLa","doNotShowExtraLabelSpecial","_useState","useState","_useState2","_slicedToArray","toggle","setToggle","onClickVisible","prevState","option","mainLabel","includes","_jsxs","FontAwesomeIcon","icon","faCaretUp","faCaretDown","DropdownList","onFormChange","investorFormId","toast","useToast","useSelector","store","secH","invFormStatus","selectedDocType","setSelectedDocType","_useState3","_useState4","uploadedDocs","setUploadedDocs","onUploadFile","_ref4","_asyncToGenerator","_regeneratorRuntime","mark","_callee","file","type","fileName","formData","_yield$uploadFiles","success","url","data","extradata","_args","arguments","wrap","_context","prev","next","length","undefined","name","FormData","append","uploadFiles","sent","loader","SUCCESS","FAILED","docUrl","resData","updateDocArray","stop","_x","apply","onClickRemove","removeDocFromArray","onClickDel","_ref6","_callee2","_ref5","docData","_yield$deleteFile","_context2","delLoader","deleteFile","error","_x2","CustomDropdown","ACCOUNTANT_CERTIFICATE_DOCUMENTS","_objectSpread","DocPlaceholder","onAddFiles","files","addNewDocToArray","uniqId","href","target","rel","InvestorCategory","React","_secH$documents","removeDocFromArr","arrOfVariables","I_HAVE_NET_ASSETS_OF_AT_LEAST_AU_H","I_HAVE_EARNED_AT_LEAST_AU_H","I_HAVE_OR_CONTROL_GROSS_ASSETS_OF_AT_LEAST_AU_H","isDocVisible","setIsDocVisible","useEffect","_secH$category_detail","category_details","some","index","category","Suspense","fallback","ShimmerCardText","QualifiedAccountantCert","documents","formatAndPrintDocs"],"sourceRoot":""}